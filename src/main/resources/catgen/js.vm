<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSPY v5 rel. 2 U (http://www.xmlspy.com) by 123 (456) -->
#set($environment = $environment)
#set($models = $totalProtoDom.getCompatibleGenericsModelDoms())
#set($controllers = $totalProtoDom.getCompatibleGenericsControllerDoms())
#set($marcoFiles = $totalProtoDom.getMarcoFileDoms())
#set($baseParams = $totalProtoDom.getBaseParamDoms())
<proto>
    <file name="gen.js">
<![CDATA[
import axios from 'axios'
let build = new Build();
function Build() {
    /**
     * @param json
     * @returns {boolean}
     */
    this.buildBoolean=function (json) {
        if(json==null) return false;
        if(json=='1'||json=='true'||json==1||json==true) return true;
        return false;
    };
    /**
     * @param json
     * @returns {Array.<boolean>}
     */
    this.buildBoolean_array=function (json) {
        let result = [];
        if(json==null) {
            return result;
        }
        for (let k = 0, length = json.length; k < length; k++) {
            result[k] = this.buildbool(json[k]);
        }
        return result;
    };
    /**
     * @param json
     * @returns {int}
     */
    this.buildNumber=function (json) {
        if(json==null) return 0;
        return parseInt(json)
    };
    /**
     * @param json
     * @returns {Array.<int>}
     */
    this.buildNumber_array=function (json) {
        let result = [];
        if(json==null) {
            return result;
        }
        for (let k = 0, length = json.length; k < length; k++) {
            result[k] = this.buildint(json[k]);
        }
        return result;
    };
    /**
     * @param json
     * @returns {string}
     */
    this.buildString=function(json) {
        if(json==null) return "";
        return String(json);
    };
    /**
     * @param json
     * @returns {Array.<string>}
     */
    this.buildString_array=function (json) {
        let result = [];
        if(json==null) {
             return result;
        }
        for (let k = 0, length = json.length; k < length; k++) {
            result[k] = this.buildstring(json[k]);
        }
        return result;
    };
#foreach($model in $models)
    /**
     * @param json
     * @returns {${model.name}}
     */
    this.build${model.name}=function (json) {
        if(json==null) {
            return new ${model.name}(null);
        }
        return new ${model.name}(json);
    };
    /**
     * @param json
     * @returns {Array.<${model.name}>}
     */
    this.build${model.name}_array=function (json) {
        let result = [];
        if(json==null) {
            return result;
        }
        for (let k = 0, length = json.length; k < length; k++) {
            result[k] = this.build${model.name}(json[k]);
        }
        return result;
    };
#end
}
#foreach($model in $models)
/** ${model.des} **/
function ${model.name}(json=false){
#foreach($parameter in ${model.modelParameterDoms})
    /**
     * ${parameter.name}
     * @type {${tool.desType($parameter.type)}}
     */
    this.${parameter.name} = build.build${tool.typeChange($parameter.type)}(json&&(json.${parameter.name}!=null)?json.${parameter.name}:null);
#end
}
#end

function sendAjax(ajax) {
    return axios({
        url:ajax.url,
        method:ajax.type,
        data:ajax.data(),
        headers: {
            "Content-Type": "application/json; charset=utf-8;"
        }
    })
}

#foreach($controller in $controllers)
#foreach($method in ${controller.methodDoms})
/**
* ${method.des}
* @constructor
*/
function Rest${controller.name}${tool.toUpperCaseFirstOne($method.name)}() {
#foreach($methodParameterDom in ${baseParams})
    /**
    * parameter $methodParameterDom.des
    * @type {$tool.desType($methodParameterDom.type)}
    */
    this.p_${methodParameterDom.name} = null;
#end
#foreach($methodParameterDom in ${method.methodParameterDoms})
    /**
     * parameter $methodParameterDom.des
     * @type {$tool.desType($methodParameterDom.type)}
     */
    this.p_${methodParameterDom.name} = null;
#end
    this.url = "$environment.baseUrl/$controller.url/$method.url";
    this.type = "$method.method";
    this.data = function(){
        return JSON.stringify({
#foreach($methodParameterDom in ${baseParams})
            ${methodParameterDom.name}:this.p_${methodParameterDom.name},
#end
#foreach($methodParameterDom in ${method.methodParameterDoms})
            ${methodParameterDom.name}:this.p_${methodParameterDom.name},
#end
        })
    }
    /**
     * parameter result
     * @type {$tool.desType($method.rep)}
     */
    this.result = null;
    let self = this;
    this.send = async function () {
        try {
            let data = await sendAjax(self);
#if(${tool.isBaseType($method.rep)})
            self.result = build.build${tool.typeChange($method.rep)}(data.data);
#else
            self.result = new ${tool.typeChange($method.rep)}(data.data);
#end
        }catch (e) {
            console.error("[curl error]"+self.url);
            console.error(e);
        }
    }
}
export {Rest${controller.name}${tool.toUpperCaseFirstOne($method.name)}}
#end
#end

#foreach($marcoFile in $marcoFiles)
let ${marcoFile.name} = {
#set($count=$marcoFile.marcoDoms.size())
#set($index=0)
#foreach($marco in ${marcoFile.marcoDoms})
#set($index=$index+1)
    /**
    * ${marco.des}
    * @type {${tool.desType($marco.type)}}
    */
#if($index==$count)
    $marco.name:${tool.getMarco($marco.type,$marco.value)}
#else
    $marco.name:${tool.getMarco($marco.type,$marco.value)},
#end
#end
}
#end
]]>
    </file>
</proto>