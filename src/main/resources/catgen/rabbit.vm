<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSPY v5 rel. 2 U (http://www.xmlspy.com) by 123 (456) -->
#set($environment = $environment)
#set($models = $protoDom.getModelDoms())
#set($baseParams = $protoDom.getBaseParamDoms())
#set($controllers = $protoDom.getControllerDoms())
#set($marcoFiles = $protoDom.getMarcoFileDoms())
#set($controller_package = $environment.controller_package)
#set($model_package = $environment.model_package)
#set($marcos_package = $environment.marcos_package)
#set($params_package = $environment.params_package)
#set($service_name = $environment.service_name)
<proto>

#foreach($controller in $controllers)
    <file name="${tool.getPath($controller_package)}${controller.name}ConsumerHandler.java">
        <![CDATA[
${environment.notes}
package ${controller_package};
import ${model_package}.*;
import ${params_package}.*;
import java.util.*;
import org.springframework.amqp.rabbit.annotation.*;
import com.rabbitmq.client.Channel;
import org.springframework.amqp.core.Message;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.amqp.rabbit.annotation.Queue;

@ConditionalOnProperty(prefix = "spring.rabbitmq", name = "host")
#if(${controller.delay}=="true")
@RabbitListener(bindings = {
        @QueueBinding(value = @Queue(value = "${controller.url}.delay",
            arguments = {
                @Argument(name = "x-dead-letter-exchange", value = "async"),
                @Argument(name = "x-dead-letter-routing-key", value = "${controller.url}"),
                @Argument(name = "x-message-ttl", value = "${controller.ttl}", type = "java.lang.Integer")
            }),
            exchange = @Exchange(value = "${service_name}", type = "topic"),
            key = "${controller.url}.delay"
        )
    }, autoStartup = "false")
@RabbitListener(bindings = {
        @QueueBinding(value = @Queue(value = "${controller.url}",
            arguments = {
                @Argument(name = "x-max-priority", value = "10", type = "java.lang.Integer")
            }),
            exchange = @Exchange(value = "${service_name}", type = "topic"),
            key = "${controller.url}"
        )
    })
 @RabbitListener(bindings = {
        @QueueBinding(value = @Queue(value = "${controller.url}.retry",
                arguments = {
                        @Argument(name = "x-dead-letter-exchange", value = "async"),
                        @Argument(name = "x-dead-letter-routing-key", value = "${controller.url}"),
                        @Argument(name = "x-message-ttl", value = "10000", type = "java.lang.Integer")
                }),
                exchange = @Exchange(value = "${service_name}", type = "topic"),
                key = "${controller.url}.retry"
        )
}, autoStartup = "false")
@RabbitListener(bindings = {
        @QueueBinding(value = @Queue(value = "${controller.url}.failed"),
                exchange = @Exchange(value = "${service_name}", type = "topic"),
                key = "${controller.url}.failed"
        )
}, autoStartup = "false")
#else
@RabbitListener(bindings = {
        @QueueBinding(value = @Queue(value = "${controller.url}",
                arguments = {
                    @Argument(name = "x-max-priority", value = "10", type = "java.lang.Integer")
                }),
                exchange = @Exchange(value = "${service_name}", type = "topic"),
                key = "${controller.url}"
        )
})
@RabbitListener(bindings = {
        @QueueBinding(value = @Queue(value = "${controller.url}.retry",
                arguments = {
                        @Argument(name = "x-dead-letter-exchange", value = "async"),
                        @Argument(name = "x-dead-letter-routing-key", value = "${controller.url}"),
                        @Argument(name = "x-message-ttl", value = "${controller.ttl}", type = "java.lang.Integer")
                }),
                exchange = @Exchange(value = "${service_name}", type = "topic"),
                key = "${controller.url}.retry"
        )
}, autoStartup = "false")
@RabbitListener(bindings = {
        @QueueBinding(value = @Queue(value = "${controller.url}.failed"),
                exchange = @Exchange(value = "${service_name}", type = "topic"),
                key = "${controller.url}.failed"
        )
}, autoStartup = "false")
#end
public interface ${controller.name}ConsumerHandler {
#foreach($method in ${controller.methodDoms})
    @RabbitHandler
    void ${method.name}(${controller.name}${tool.toUpperCaseFirstOne($method.name)}Params m${controller.name}${tool.toUpperCaseFirstOne($method.name)}Params, Channel channel, Message message) throws Exception;
#end
}
        ]]>

    </file>

    <file name="${tool.getPath($controller_package)}${controller.name}ProducerHandler.java">
        <![CDATA[
${environment.notes}
package ${controller_package};
import ${model_package}.*;
import ${params_package}.*;
import java.util.List;
import org.springframework.amqp.core.AmqpTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;

@ConditionalOnProperty(prefix = "spring.rabbitmq",name = "host")
@Component
public class ${controller.name}ProducerHandler {
    @Autowired
    private AmqpTemplate amqpTemplate;
#foreach($method in ${controller.methodDoms})
    /**
     * ${method.des}
     */
    public void ${method.name}(${controller.name}${tool.toUpperCaseFirstOne($method.name)}Params m${controller.name}${tool.toUpperCaseFirstOne($method.name)}Params) {
        amqpTemplate.convertAndSend("${controller.url}", m${controller.name}${tool.toUpperCaseFirstOne($method.name)}Params);
    }
#end
}
        ]]>
    </file>

    <file name="${tool.getPath($controller_package)}${controller.name}ProducerHandler.java">
        <![CDATA[
${environment.notes}
package ${controller_package};
import ${model_package}.*;
import ${params_package}.*;
import java.util.List;
import org.springframework.amqp.core.AmqpTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.amqp.core.MessagePostProcessor;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;

@ConditionalOnProperty(prefix = "spring.rabbitmq",name = "host")
@Component
public class ${controller.name}ProducerHandler {
    @Autowired
    private AmqpTemplate amqpTemplate;
#if(${controller.delay}=="true")
#set($url=${controller.url}+".delay")
#else
#set($url=${controller.url})
#end
#foreach($method in ${controller.methodDoms})
    /**
     * ${method.des}
     */
    public void ${method.name}(${controller.name}${tool.toUpperCaseFirstOne($method.name)}Params m${controller.name}${tool.toUpperCaseFirstOne($method.name)}Params) {
        amqpTemplate.convertAndSend("$url", m${controller.name}${tool.toUpperCaseFirstOne($method.name)}Params);
    }
    /**
     * ${method.des}
     */
    public void ${method.name}(${controller.name}${tool.toUpperCaseFirstOne($method.name)}Params m${controller.name}${tool.toUpperCaseFirstOne($method.name)}Params, MessagePostProcessor messagePostProcessor) {
        amqpTemplate.convertAndSend("$url", m${controller.name}${tool.toUpperCaseFirstOne($method.name)}Params,messagePostProcessor);
    }
#end
}
        ]]>
    </file>
#end
</proto>