<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSPY v5 rel. 2 U (http://www.xmlspy.com) by 123 (456) -->
#set($environment = $environment)
#set($models = $protoDom.getModelDoms())
#set($baseParams = $protoDom.getBaseParamDoms())
#set($controllers = $protoDom.getControllerDoms())
#set($marcoFiles = $protoDom.getMarcoFileDoms())
#set($controller_package = $environment.controller_package)
#set($model_package = $environment.model_package)
#set($marcos_package = $environment.marcos_package)
#set($params_package = $environment.params_package)

<proto>
#foreach($model in $models)
    <file name="${tool.getPath($model_package)}${tool.getFileName($model.name)}.java">
<![CDATA[
${environment.notes}
package ${model_package};
import java.util.*;
import java.lang.reflect.Field;
import lombok.*;
import com.alibaba.fastjson.*;
import java.io.*;
@Data
@AllArgsConstructor
@NoArgsConstructor
@Builder
/**
 * ${model.des}
 */
public class ${tool.baseType($model.name)} implements Serializable, Cloneable {
#foreach($parameter in ${model.modelParameterDoms})
    /**
     * ${parameter.des}
     */
    private $tool.typeChange(${parameter.type}) ${parameter.name};

#end
#if(${tool.isT($model.name)})
    /**
    * Assign From Object
    * @param obj
    */
    public static <T> ${tool.baseType($model.name)} fromObject(Object obj,Class<T> clazz)  {
        String str= JSON.toJSONString(obj);
        return JSON.parseObject(str,new TypeReference<${tool.baseType($model.name)}>(clazz){});
    }
    /**
    * Assign From Object
    * @param str
    */
    public static <T> ${tool.baseType($model.name)} fromObject(String str,Class<T> clazz)  {
        return JSON.parseObject(str,new TypeReference<${tool.baseType($model.name)}>(clazz){});
    }
#else
    /**
    * Assign From Object
    * @param obj
    */
    public static ${tool.baseType($model.name)} fromObject(Object obj)  {
        String str= JSON.toJSONString(obj);
        return JSON.parseObject(str,${tool.baseType($model.name)}.class);
    }
    /**
    * Assign From Object
    * @param str
    */
    public static ${tool.baseType($model.name)} fromObject(String str)  {
        return JSON.parseObject(str,${tool.baseType($model.name)}.class);
    }
#end
    public ${tool.baseType($model.name)} clone() throws CloneNotSupportedException {
        return (${tool.baseType($model.name)}) super.clone();
    }
    public ${tool.baseType($model.name)} deepClone() throws IOException, ClassNotFoundException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(bos);
        oos.writeObject(this);
        ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());
        ObjectInputStream ois = new ObjectInputStream(bis);
        return (${tool.baseType($model.name)}) ois.readObject();
    }
}
]]>
    </file>
#end

<file name="${tool.getPath($params_package)}base/BaseParams.java">
    <![CDATA[
package ${params_package}.base;
import io.swagger.annotations.*;
import lombok.*;
import java.io.*;

@Data
@ApiModel
public class BaseParams implements Serializable, Cloneable {
#foreach($methodParameterDom in ${baseParams})
    @ApiModelProperty("${methodParameterDom.des}")
    private $tool.typeChange(${methodParameterDom.type}) ${methodParameterDom.name};
#end
    public boolean checkRequired() {
#foreach($methodParameterDom in ${method.methodParameterDoms})
#if($methodParameterDom.required)
        if (${methodParameterDom.name} == null) return false;
#end
#end
        return true;
    }

    public Object deepClone() throws IOException, ClassNotFoundException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(bos);
        oos.writeObject(this);
        ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());
        ObjectInputStream ois = new ObjectInputStream(bis);
        return ois.readObject();
    }
}
    ]]>
</file>

#foreach($controller in $controllers)
#foreach($method in ${controller.methodDoms})
#if(${method.methodParameterDoms.size()}>0)
    <file name="${tool.getPath($params_package)}${controller.name}${tool.toUpperCaseFirstOne($method.name)}Params.java">
        <![CDATA[
package ${params_package};
import ${params_package}.base.BaseParams;
import io.swagger.annotations.*;
import lombok.*;
import com.huiyi.autogen.model.*;
import java.util.*;
import java.io.*;

@Data
@AllArgsConstructor
@Builder
@NoArgsConstructor
@ApiModel
public class ${controller.name}${tool.toUpperCaseFirstOne($method.name)}Params extends BaseParams {
#foreach($methodParameterDom in ${method.methodParameterDoms})
    @ApiModelProperty("${methodParameterDom.des}")
    private $tool.typeChange(${methodParameterDom.type}) ${methodParameterDom.name};
#end
    public boolean checkRequired() {
        if (!super.checkRequired()) return false;
#foreach($methodParameterDom in ${method.methodParameterDoms})
#if($methodParameterDom.required)
        if (${methodParameterDom.name} == null) return false;
#end
#end
        return true;
    }
    public ${controller.name}${tool.toUpperCaseFirstOne($method.name)}Params clone() throws CloneNotSupportedException {
        return (${controller.name}${tool.toUpperCaseFirstOne($method.name)}Params) super.clone();
    }

    public ${controller.name}${tool.toUpperCaseFirstOne($method.name)}Params deepClone() throws IOException, ClassNotFoundException {
        return (${controller.name}${tool.toUpperCaseFirstOne($method.name)}Params) super.deepClone();
    }
}
        ]]>
    </file>
#end
#end
#end


#foreach($marcoFile in $marcoFiles)
    <file name="${tool.getPath($marcos_package)}${marcoFile.name}.java">
        <![CDATA[
${environment.notes}
package ${marcos_package};
public class ${marcoFile.name} {
#foreach($marco in ${marcoFile.marcoDoms})
    /**
     * ${marco.des};
     */
    public static final $tool.typeChange(${marco.type}) ${marco.name} = ${tool.getMarco($marco.type,$marco.value)};
#end
}
        ]]>
    </file>
#end
</proto>