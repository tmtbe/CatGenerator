<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSPY v5 rel. 2 U (http://www.xmlspy.com) by 123 (456) -->
#set($environment = $environment)
#set($models = $protoDom.getModelDoms())
#set($baseParams = $protoDom.getBaseParamDoms())
#set($controllers = $protoDom.getControllerDoms())
#set($marcoFiles = $protoDom.getMarcoFileDoms())
#set($controller_package = $environment.controller_package)
#set($model_package = $environment.model_package)
#set($marcos_package = $environment.marcos_package)
#set($params_package = $environment.params_package)

#set($service_name = $protoDom.file_name)
<proto>
#foreach($model in $models)
    <file name="${tool.getPath($model_package)}${tool.getFileName($model.name)}.java">
<![CDATA[
${environment.notes}
package ${model_package};
import java.io.Serializable;
import java.util.Date;
import java.util.List;
import lombok.Data;
import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.TypeReference;
import lombok.Builder;
@Data
@AllArgsConstructor
@NoArgsConstructor
@Builder
/**
 * ${model.des}
 */
public class ${tool.baseType($model.name)} implements Serializable {
#foreach($parameter in ${model.modelParameterDoms})
    /**
     * ${parameter.des}
     */
    private $tool.typeChange(${parameter.type}) ${parameter.name};

#end

#if(${tool.isT($model.name)})
    /**
    * Assign From Object
    * @param obj
    */
    public static <T> ${tool.baseType($model.name)} fromObject(Object obj,Class<T> clazz)  {
        String str= JSON.toJSONString(obj);
        return JSON.parseObject(str,new TypeReference<${tool.baseType($model.name)}>(clazz){});
    }
    /**
    * Assign From Object
    * @param str
    */
    public static <T> ${tool.baseType($model.name)} fromObject(String str,Class<T> clazz)  {
        return JSON.parseObject(str,new TypeReference<${tool.baseType($model.name)}>(clazz){});
    }
#else
    /**
    * Assign From Object
    * @param obj
    */
    public static ${tool.baseType($model.name)} fromObject(Object obj)  {
        String str= JSON.toJSONString(obj);
        return JSON.parseObject(str,${tool.baseType($model.name)}.class);
    }
    /**
    * Assign From Object
    * @param str
    */
    public static ${tool.baseType($model.name)} fromObject(String str)  {
        return JSON.parseObject(str,${tool.baseType($model.name)}.class);
    }
#end
}
]]>
    </file>
#end

<file name="${tool.getPath($params_package)}base/BaseParams.java">
    <![CDATA[
package ${params_package}.base;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;
import java.io.Serializable;
@Data
@ApiModel
public class BaseParams implements Serializable {
#foreach($methodParameterDom in ${baseParams})
    @ApiModelProperty("${methodParameterDom.des}")
    private $tool.typeChange(${methodParameterDom.type}) ${methodParameterDom.name};
#end
    public boolean checkRequired() {
#foreach($methodParameterDom in ${method.methodParameterDoms})
#if($methodParameterDom.required)
        if (${methodParameterDom.name} == null) return false;
#end
#end
        return true;
    }
}
    ]]>
</file>

#foreach($controller in $controllers)
#foreach($method in ${controller.methodDoms})
    <file name="${tool.getPath($params_package)}${controller.name}${tool.toUpperCaseFirstOne($method.name)}Params.java">
        <![CDATA[
package ${params_package};
import ${params_package}.base.BaseParams;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;
import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;
@Data
@AllArgsConstructor
@NoArgsConstructor
@ApiModel
public class ${controller.name}${tool.toUpperCaseFirstOne($method.name)}Params extends BaseParams {
#foreach($methodParameterDom in ${method.methodParameterDoms})
    @ApiModelProperty("${methodParameterDom.des}")
    private $tool.typeChange(${methodParameterDom.type}) ${methodParameterDom.name};
#end
    public boolean checkRequired() {
        if (!super.checkRequired()) return false;
#foreach($methodParameterDom in ${method.methodParameterDoms})
#if($methodParameterDom.required)
        if (${methodParameterDom.name} == null) return false;
#end
#end
        return true;
    }
}
        ]]>
    </file>
#end
#end
#foreach($controller in $controllers)
    <file name="${tool.getPath($controller_package)}${controller.name}Client.java">
<![CDATA[
${environment.notes}
package ${controller_package};
import ${model_package}.*;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;
import ${params_package}.*;
import org.springframework.cloud.openfeign.FeignClient;
import java.util.List;

@FeignClient(name = "${service_name}",fallbackFactory = ${controller.name}FallBackFactory.class)
@RequestMapping("${controller.url}")
public interface ${controller.name}Client {
#foreach($method in ${controller.methodDoms})
    /**
    * ${method.des}
    */
    @$tool.toUpperCaseFirstOneOtherLow(${method.method})Mapping("${method.url}")
#if(${method.methodParameterDoms.size()} == 0)
    $tool.typeChange(${method.rep}) ${method.name}();
#else
#if(${method.rep} == "post")
    $tool.typeChange(${method.rep}) ${method.name}(@RequestBody ${controller.name}${tool.toUpperCaseFirstOne($method.name)}Params m${controller.name}${tool.toUpperCaseFirstOne($method.name)}Params);
#else
    $tool.typeChange(${method.rep}) ${method.name}(${controller.name}${tool.toUpperCaseFirstOne($method.name)}Params m${controller.name}${tool.toUpperCaseFirstOne($method.name)}Params);
#end
#end
#end
}
]]>
    </file>
#end

#foreach($controller in $controllers)
    <file name="${tool.getPath($controller_package)}${controller.name}FallBackFactory.java">
        <![CDATA[
${environment.notes}
package ${controller_package};
import ${model_package}.*;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;
import ${params_package}.*;
import java.util.List;
import feign.hystrix.FallbackFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

@Component
public class ${controller.name}FallBackFactory implements FallbackFactory<${controller.name}Client>{
    private static final Logger LOGGER = LoggerFactory.getLogger(${controller.name}FallBackFactory.class);
#foreach($method in ${controller.methodDoms})
    private static $tool.typeChange(${method.rep}) ${method.name}Result;

    public static void set$tool.toUpperCaseFirstOne(${method.name})Result($tool.typeChange(${method.rep}) ${method.name}Result) {
        ${controller.name}FallBackFactory.${method.name}Result = ${method.name}Result;
    }

#end
    @Override
    public ${controller.name}Client create(Throwable throwable) {
        ${controller.name}FallBackFactory.LOGGER.info("fallback; reason was: {}", throwable.getMessage());
        return new ${controller.name}Client() {
#foreach($method in ${controller.methodDoms})
           /**
            * ${method.des}
            */
            @Override
#if(${method.methodParameterDoms.size()} == 0)
            public $tool.typeChange(${method.rep}) ${method.name}(){
#else
            public $tool.typeChange(${method.rep}) ${method.name}(@RequestBody ${controller.name}${tool.toUpperCaseFirstOne($method.name)}Params m${controller.name}${tool.toUpperCaseFirstOne($method.name)}Params){
#end
                return ${method.name}Result;
            }
#end
        };
    }
}
        ]]>
    </file>
#end

#foreach($marcoFile in $marcoFiles)
    <file name="${tool.getPath($marcos_package)}${marcoFile.name}.java">
        <![CDATA[
${environment.notes}
package ${marcos_package};
public class ${marcoFile.name} {
#foreach($marco in ${marcoFile.marcoDoms})
    /**
    * ${marco.des};
    */
    public static final $tool.typeChange(${marco.type}) ${marco.name} = ${tool.getMarco($marco.type,$marco.value)};
#end
}
        ]]>
    </file>
#end

</proto>