<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSPY v5 rel. 2 U (http://www.xmlspy.com) by 123 (456) -->
#set($environment = $environment)
#set($models = $protoDom.getModelDoms())
#set($baseParams = $protoDom.getBaseParamDoms())
#set($controllers = $protoDom.getControllerDoms())
#set($marcoFiles = $protoDom.getMarcoFileDoms())
#set($controller_package = $environment.controller_package)
#set($model_package = $environment.model_package)
#set($marcos_package = $environment.marcos_package)
#set($params_package = $environment.params_package)
#set($service_name = $protoDom.file_name)

<proto>
#foreach($controller in $controllers)
    <file name="${tool.getPath($controller_package)}${controller.name}Client.java">
<![CDATA[
${environment.notes}
package ${controller_package};
import ${model_package}.*;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;
import ${params_package}.*;
import org.springframework.cloud.openfeign.FeignClient;
import java.util.List;

@FeignClient(name = "${service_name}",fallbackFactory = ${controller.name}FallBackFactory.class)
@RequestMapping("${controller.url}")
public interface ${controller.name}Client {
#foreach($method in ${controller.methodDoms})
    /**
    * ${method.des}
    */
    @RequestMapping(method = RequestMethod.$tool.toUpperCase(${method.method}),path = "${method.url}")
#if(${method.methodParameterDoms.size()} == 0)
    $tool.typeChange(${method.rep}) ${method.name}();
#else
#if($tool.toUpperCase(${method.method}) == "POST")
    $tool.typeChange(${method.rep}) ${method.name}(@RequestBody ${controller.name}${tool.toUpperCaseFirstOne($method.name)}Params m${controller.name}${tool.toUpperCaseFirstOne($method.name)}Params);
#else
    $tool.typeChange(${method.rep}) ${method.name}(${controller.name}${tool.toUpperCaseFirstOne($method.name)}Params m${controller.name}${tool.toUpperCaseFirstOne($method.name)}Params);
#end
#end
#end
}
]]>
    </file>
#end

#foreach($controller in $controllers)
    <file name="${tool.getPath($controller_package)}${controller.name}FallBackFactory.java">
        <![CDATA[
${environment.notes}
package ${controller_package};
import ${model_package}.*;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;
import ${params_package}.*;
import java.util.List;
import feign.hystrix.FallbackFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

@Component
public class ${controller.name}FallBackFactory implements FallbackFactory<${controller.name}Client>{
    private static final Logger LOGGER = LoggerFactory.getLogger(${controller.name}FallBackFactory.class);
#foreach($method in ${controller.methodDoms})
    private static $tool.typeChange(${method.rep}) ${method.name}Result;

    public static void set$tool.toUpperCaseFirstOne(${method.name})Result($tool.typeChange(${method.rep}) ${method.name}Result) {
        ${controller.name}FallBackFactory.${method.name}Result = ${method.name}Result;
    }

#end
    @Override
    public ${controller.name}Client create(Throwable throwable) {
        ${controller.name}FallBackFactory.LOGGER.info("fallback; reason was: {}", throwable.getMessage());
        return new ${controller.name}Client() {
#foreach($method in ${controller.methodDoms})
           /**
            * ${method.des}
            */
            @Override
#if(${method.methodParameterDoms.size()} == 0)
            public $tool.typeChange(${method.rep}) ${method.name}(){
#else
            public $tool.typeChange(${method.rep}) ${method.name}(@RequestBody ${controller.name}${tool.toUpperCaseFirstOne($method.name)}Params m${controller.name}${tool.toUpperCaseFirstOne($method.name)}Params){
#end
                return ${method.name}Result;
            }
#end
        };
    }
}
        ]]>
    </file>
#end
</proto>